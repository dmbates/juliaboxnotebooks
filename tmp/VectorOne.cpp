// Code generated by Stan version 2.5

#include <stan/model/model_header.hpp>
#include <stan/common/command.hpp>

namespace VectorOne_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
using namespace stan::prob;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

class VectorOne_model : public prob_grad {
private:
    int N;
    int K;
    int M;
    int J;
    vector<int> subj;
    matrix_d X;
    vector<row_vector_d> Z;
    vector_d y;
public:
    VectorOne_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        static const char* function__ = "VectorOne_model_namespace::VectorOne_model(%1%)";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        context__.validate_dims("data initialization", "M", "int", context__.to_vec());
        M = int(0);
        vals_i__ = context__.vals_i("M");
        pos__ = 0;
        M = vals_i__[pos__++];
        context__.validate_dims("data initialization", "J", "int", context__.to_vec());
        J = int(0);
        vals_i__ = context__.vals_i("J");
        pos__ = 0;
        J = vals_i__[pos__++];
        context__.validate_dims("data initialization", "subj", "int", context__.to_vec(N));
        stan::math::validate_non_negative_index("subj", "N", N);
        subj = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("subj");
        pos__ = 0;
        size_t subj_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < subj_limit_0__; ++i_0__) {
            subj[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
        stan::math::validate_non_negative_index("X", "N", N);
        stan::math::validate_non_negative_index("X", "K", K);
        X = matrix_d(N,K);
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_m_mat_lim__ = N;
        size_t X_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "Z", "row_vector_d", context__.to_vec(N,J));
        stan::math::validate_non_negative_index("Z", "N", N);
        stan::math::validate_non_negative_index("Z", "J", J);
        Z = std::vector<row_vector_d>(N,row_vector_d(J));
        vals_r__ = context__.vals_r("Z");
        pos__ = 0;
        size_t Z_i_vec_lim__ = J;
        for (size_t i_vec__ = 0; i_vec__ < Z_i_vec_lim__; ++i_vec__) {
            size_t Z_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < Z_limit_0__; ++i_0__) {
                Z[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        stan::math::validate_non_negative_index("y", "N", N);
        y = vector_d(N);
        context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < y_i_vec_lim__; ++i_vec__) {
            y[i_vec__] = vals_r__[pos__++];
        }

        // validate data
        try { 
            check_greater_or_equal(function__,N,0,"N", (double *)0);
        } catch (const std::exception& e) { 
            throw std::domain_error(std::string("Invalid value of N: ") + std::string(e.what()));
        };
        try { 
            check_greater_or_equal(function__,K,1,"K", (double *)0);
        } catch (const std::exception& e) { 
            throw std::domain_error(std::string("Invalid value of K: ") + std::string(e.what()));
        };
        try { 
            check_greater_or_equal(function__,M,1,"M", (double *)0);
        } catch (const std::exception& e) { 
            throw std::domain_error(std::string("Invalid value of M: ") + std::string(e.what()));
        };
        try { 
            check_greater_or_equal(function__,J,1,"J", (double *)0);
        } catch (const std::exception& e) { 
            throw std::domain_error(std::string("Invalid value of J: ") + std::string(e.what()));
        };
        for (int k0__ = 0; k0__ < N; ++k0__) {
            try { 
                check_greater_or_equal(function__,subj[k0__],1,"subj[k0__]", (double *)0);
                check_less_or_equal(function__,subj[k0__],M,"subj[k0__]", (double *)0);
            } catch (const std::exception& e) { 
                throw std::domain_error(std::string("Invalid value of subj: ") + std::string(e.what()));
            };
        }


        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += ((J * (J - 1)) / 2);
        num_params_r__ += J;
        num_params_r__ += J * M;
        num_params_r__ += K;
        ++num_params_r__;
    }

    ~VectorOne_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;


        if (!(context__.contains_r("L")))
            throw std::runtime_error("variable L missing");
        vals_r__ = context__.vals_r("L");
        pos__ = 0U;
        context__.validate_dims("initialization", "L", "matrix_d", context__.to_vec(J,J));
        matrix_d L(J,J);
        for (int j2__ = 0U; j2__ < J; ++j2__)
            for (int j1__ = 0U; j1__ < J; ++j1__)
                L(j1__,j2__) = vals_r__[pos__++];
        try { writer__.cholesky_corr_unconstrain(L); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable L: ") + e.what()); }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "vector_d", context__.to_vec(J));
        vector_d tau(J);
        for (int j1__ = 0U; j1__ < J; ++j1__)
            tau(j1__) = vals_r__[pos__++];
        try { writer__.vector_lb_unconstrain(0,tau); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what()); }

        if (!(context__.contains_r("u")))
            throw std::runtime_error("variable u missing");
        vals_r__ = context__.vals_r("u");
        pos__ = 0U;
        context__.validate_dims("initialization", "u", "vector_d", context__.to_vec(M,J));
        std::vector<vector_d> u(M,vector_d(J));
        for (int j1__ = 0U; j1__ < J; ++j1__)
            for (int i0__ = 0U; i0__ < M; ++i0__)
                u[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < M; ++i0__)
            try { writer__.vector_unconstrain(u[i0__]); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable u: ") + e.what()); }

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta", "vector_d", context__.to_vec(K));
        vector_d beta(K);
        for (int j1__ = 0U; j1__ < K; ++j1__)
            beta(j1__) = vals_r__[pos__++];
        try { writer__.vector_unconstrain(beta); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what()); }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try { writer__.scalar_lb_unconstrain(0,sigma); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()); }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  L;
        (void) L;   // dummy to suppress unused var warning
        if (jacobian__)
            L = in__.cholesky_corr_constrain(J,lp__);
        else
            L = in__.cholesky_corr_constrain(J);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  tau;
        (void) tau;   // dummy to suppress unused var warning
        if (jacobian__)
            tau = in__.vector_lb_constrain(0,J,lp__);
        else
            tau = in__.vector_lb_constrain(0,J);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > u;
        size_t dim_u_0__ = M;
        u.reserve(dim_u_0__);
        for (size_t k_0__ = 0; k_0__ < dim_u_0__; ++k_0__) {
            if (jacobian__)
                u.push_back(in__.vector_constrain(J,lp__));
            else
                u.push_back(in__.vector_constrain(J));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta;
        (void) beta;   // dummy to suppress unused var warning
        if (jacobian__)
            beta = in__.vector_constrain(K,lp__);
        else
            beta = in__.vector_constrain(K);

        T__ sigma;
        (void) sigma;   // dummy to suppress unused var warning
        if (jacobian__)
            sigma = in__.scalar_lb_constrain(0,lp__);
        else
            sigma = in__.scalar_lb_constrain(0);


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  Lambda(J,J);
        (void) Lambda;   // dummy to suppress unused var warning
        stan::math::fill(Lambda,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  corr(J,J);
        (void) corr;   // dummy to suppress unused var warning
        stan::math::fill(corr,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > b(M, (Eigen::Matrix<T__,Eigen::Dynamic,1> (J)));
        stan::math::fill(b,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  muX(N);
        (void) muX;   // dummy to suppress unused var warning
        stan::math::fill(muX,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(N);
        (void) mu;   // dummy to suppress unused var warning
        stan::math::fill(mu,DUMMY_VAR__);

        // initialized transformed params to avoid seg fault on val access
        stan::math::fill(Lambda,DUMMY_VAR__);
        stan::math::fill(corr,DUMMY_VAR__);
        stan::math::fill(b,DUMMY_VAR__);
        stan::math::fill(muX,DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);

        stan::math::assign(corr, tcrossprod(L));
        stan::math::assign(Lambda, diag_pre_multiply(tau,L));
        for (int m = 1; m <= M; ++m) {
            stan::math::assign(get_base1_lhs(b,m,"b",1), multiply(Lambda,get_base1(u,m,"u",1)));
        }
        stan::math::assign(muX, multiply(X,beta));
        for (int n = 1; n <= N; ++n) {
            stan::math::assign(get_base1_lhs(mu,n,"mu",1), (get_base1(muX,n,"muX",1) + multiply(get_base1(Z,n,"Z",1),get_base1(b,get_base1(subj,n,"subj",1),"b",1))));
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < J; ++i0__) {
            for (int i1__ = 0; i1__ < J; ++i1__) {
                if (stan::math::is_uninitialized(Lambda(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Lambda" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < J; ++i0__) {
            for (int i1__ = 0; i1__ < J; ++i1__) {
                if (stan::math::is_uninitialized(corr(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: corr" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < M; ++i0__) {
            for (int i1__ = 0; i1__ < J; ++i1__) {
                if (stan::math::is_uninitialized(b[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: b" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < N; ++i0__) {
            if (stan::math::is_uninitialized(muX(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: muX" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < N; ++i0__) {
            if (stan::math::is_uninitialized(mu(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params %1%";
        (void) function__; // dummy to suppress unused var warning
        // model body
        lp_accum__.add(cauchy_log<propto__>(tau, 0, 2.5));
        lp_accum__.add(lkj_corr_cholesky_log<propto__>(L, 2));
        for (int m = 1; m <= M; ++m) {
            lp_accum__.add(normal_log<propto__>(get_base1(u,m,"u",1), 0, sigma));
        }
        lp_accum__.add(normal_log<propto__>(y, mu, sigma));

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("L");
        names__.push_back("tau");
        names__.push_back("u");
        names__.push_back("beta");
        names__.push_back("sigma");
        names__.push_back("Lambda");
        names__.push_back("corr");
        names__.push_back("b");
        names__.push_back("muX");
        names__.push_back("mu");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(J);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "VectorOne_model_namespace::write_array(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        matrix_d L = in__.cholesky_corr_constrain(J);
        vector_d tau = in__.vector_lb_constrain(0,J);
        vector<vector_d> u;
        size_t dim_u_0__ = M;
        for (size_t k_0__ = 0; k_0__ < dim_u_0__; ++k_0__) {
            u.push_back(in__.vector_constrain(J));
        }
        vector_d beta = in__.vector_constrain(K);
        double sigma = in__.scalar_lb_constrain(0);
        for (int k_1__ = 0; k_1__ < J; ++k_1__) {
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
                vars__.push_back(L(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(tau[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < J; ++k_1__) {
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
                vars__.push_back(u[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(beta[k_0__]);
        }
        vars__.push_back(sigma);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        matrix_d Lambda(J,J);
        (void) Lambda;   // dummy to suppress unused var warning
        matrix_d corr(J,J);
        (void) corr;   // dummy to suppress unused var warning
        vector<vector_d> b(M, (vector_d(J)));
        vector_d muX(N);
        (void) muX;   // dummy to suppress unused var warning
        vector_d mu(N);
        (void) mu;   // dummy to suppress unused var warning

        stan::math::assign(corr, tcrossprod(L));
        stan::math::assign(Lambda, diag_pre_multiply(tau,L));
        for (int m = 1; m <= M; ++m) {
            stan::math::assign(get_base1_lhs(b,m,"b",1), multiply(Lambda,get_base1(u,m,"u",1)));
        }
        stan::math::assign(muX, multiply(X,beta));
        for (int n = 1; n <= N; ++n) {
            stan::math::assign(get_base1_lhs(mu,n,"mu",1), (get_base1(muX,n,"muX",1) + multiply(get_base1(Z,n,"Z",1),get_base1(b,get_base1(subj,n,"subj",1),"b",1))));
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < J; ++k_1__) {
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
                vars__.push_back(Lambda(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < J; ++k_1__) {
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
                vars__.push_back(corr(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < J; ++k_1__) {
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
                vars__.push_back(b[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(muX[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities


        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }


    void write_csv_header(std::ostream& o__) const {
        stan::io::csv_writer writer__(o__);
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                writer__.comma();
                o__ << "L" << '.' << k_0__ << '.' << k_1__;
            }
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            writer__.comma();
            o__ << "tau" << '.' << k_0__;
        }
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                writer__.comma();
                o__ << "u" << '.' << k_0__ << '.' << k_1__;
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            writer__.comma();
            o__ << "beta" << '.' << k_0__;
        }
        writer__.comma();
        o__ << "sigma";
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                writer__.comma();
                o__ << "Lambda" << '.' << k_0__ << '.' << k_1__;
            }
        }
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                writer__.comma();
                o__ << "corr" << '.' << k_0__ << '.' << k_1__;
            }
        }
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                writer__.comma();
                o__ << "b" << '.' << k_0__ << '.' << k_1__;
            }
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            writer__.comma();
            o__ << "muX" << '.' << k_0__;
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            writer__.comma();
            o__ << "mu" << '.' << k_0__;
        }
        writer__.newline();
    }

    template <typename RNG>
    void write_csv(RNG& base_rng__,
                   std::vector<double>& params_r__,
                   std::vector<int>& params_i__,
                   std::ostream& o__,
                   std::ostream* pstream__ = 0) const {
        stan::io::reader<double> in__(params_r__,params_i__);
        stan::io::csv_writer writer__(o__);
        static const char* function__ = "VectorOne_model_namespace::write_csv(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        matrix_d L = in__.cholesky_corr_constrain(J);
        writer__.write(L);
        vector_d tau = in__.vector_lb_constrain(0,J);
        writer__.write(tau);
        vector<vector_d> u;
        size_t dim_u_0__ = M;
        for (size_t k_0__ = 0; k_0__ < dim_u_0__; ++k_0__) {
            u.push_back(in__.vector_constrain(J));
            writer__.write(u[k_0__]);
        }
        vector_d beta = in__.vector_constrain(K);
        writer__.write(beta);
        double sigma = in__.scalar_lb_constrain(0);
        writer__.write(sigma);

        // declare, define and validate transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        matrix_d Lambda(J,J);
        (void) Lambda;   // dummy to suppress unused var warning
        matrix_d corr(J,J);
        (void) corr;   // dummy to suppress unused var warning
        vector<vector_d> b(M, (vector_d(J)));
        vector_d muX(N);
        (void) muX;   // dummy to suppress unused var warning
        vector_d mu(N);
        (void) mu;   // dummy to suppress unused var warning

        stan::math::assign(corr, tcrossprod(L));
        stan::math::assign(Lambda, diag_pre_multiply(tau,L));
        for (int m = 1; m <= M; ++m) {
            stan::math::assign(get_base1_lhs(b,m,"b",1), multiply(Lambda,get_base1(u,m,"u",1)));
        }
        stan::math::assign(muX, multiply(X,beta));
        for (int n = 1; n <= N; ++n) {
            stan::math::assign(get_base1_lhs(mu,n,"mu",1), (get_base1(muX,n,"muX",1) + multiply(get_base1(Z,n,"Z",1),get_base1(b,get_base1(subj,n,"subj",1),"b",1))));
        }


        // write transformed parameters
        writer__.write(Lambda);
        writer__.write(corr);
        for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            writer__.write(b[k_0__]);
        }
        writer__.write(muX);
        writer__.write(mu);

        // declare and define generated quantities


        // validate generated quantities

        // write generated quantities
        writer__.newline();
    }

    template <typename RNG>
    void write_csv(RNG& base_rng,
                   Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                   std::ostream& o,
                   std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<int> params_i_vec;  // dummy
      write_csv(base_rng, params_r_vec, params_i_vec, o, pstream);
    }

    static std::string model_name() {
        return "VectorOne_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "u" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Lambda" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "muX" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= ((J * (J - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "u" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Lambda" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= J; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "muX" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef VectorOne_model_namespace::VectorOne_model stan_model;

